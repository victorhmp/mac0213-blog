<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[MAC0213 Blog]]></title><description><![CDATA[A simple blog with updates on activities being conducted as part of the discipline MAC0213]]></description><link>https://victorhmp.github.io/mac0213-blog/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 29 Jun 2019 14:39:20 GMT</lastBuildDate><item><title><![CDATA[Teste de configuração (GitLab CI/CD)]]></title><description><![CDATA[Durante a semana dos dias 16/06 à 22/06, criei um repositório privado no GitLab chamado   na minha conta pessoal para hospedar o código…]]></description><link>https://victorhmp.github.io/mac0213-blog//16-06/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//16-06/</guid><pubDate>Sun, 23 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 16/06 à 22/06, criei um repositório privado no GitLab chamado &lt;code class=&quot;language-text&quot;&gt;fatima-test&lt;/code&gt; na minha conta pessoal para hospedar o código-fonte da aplicação já dockerizado e escrevi o arquivo &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci.yml&lt;/code&gt; que configura os diferentes passos do continuous integration a serem executados.&lt;/p&gt;
&lt;p&gt;Configurei os passos de &lt;em&gt;build&lt;/em&gt; e &lt;em&gt;stage&lt;/em&gt;, que são executados por Runners que executam comandos de Docker e preparam a aplicação para ser lançada.&lt;/p&gt;
&lt;p&gt;Infelizmente não consegui implementar o passo final no GitLab CI/CD que seria o deploy da aplicação, pois isso só pode ser feito no repositório oficial da FATIMA e terá que ser implementado pelo time da SMIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 5 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 8)]]></title><description><![CDATA[Durante a semana dos dias 09/06 à 15/06, dei os passos finais para concluir a conteinerização da FATIMA. O time da SMIT no nosso servidor do…]]></description><link>https://victorhmp.github.io/mac0213-blog//09-06/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//09-06/</guid><pubDate>Sun, 16 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 09/06 à 15/06, dei os passos finais para concluir a conteinerização da FATIMA.&lt;/p&gt;
&lt;p&gt;O time da SMIT no nosso servidor do Slack e eles me passaram instruções de como utilizar o Apache HTTP Server e decidi que seria melhor como base a imagem oficial no &lt;em&gt;Docker Hub&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Escrevi uma Dockerfile nova que usa a Apache HTTP server como base, instala Node.js e NPM no contêiner e depois usa o próprio NPM para instalar o Gulp, que então executa o build e por fim coloca o resultado no diretório /usr/local/apache2/htdocs/ do container para ser servida pela porta 3001.&lt;/p&gt;
&lt;p&gt;Com os três módulos funcionando, atualizei o arquivo &lt;code class=&quot;language-text&quot;&gt;docker-compose.yml&lt;/code&gt; que lida com o processo de criação e build dos três contêineres, cria os volumes necessários para persistência de cada um e cria a network que eles precisam para se comunicar.&lt;/p&gt;
&lt;p&gt;Em uma reunião com o time da SMIT, testamos o funcionamento completo da plataforma já completamente dockerizada e vimos que tudo estava funcionando como devia, menos a funcionalidade de geração de PDFs de forma persistente. Esse problema foi resolvido com a criação de mais um volume no docker-compose.yml que é mapeado e compartilhado pelos contêineres do &lt;em&gt;front-end&lt;/em&gt; e do &lt;em&gt;back-end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 5 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 7)]]></title><description><![CDATA[Durante a semana dos dias 02/06 à 08/06, consegui focar meu trabalho no módulo de  front-end . Num primeiro momento criei um Dockerfile para…]]></description><link>https://victorhmp.github.io/mac0213-blog//02-06/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//02-06/</guid><pubDate>Sun, 09 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 02/06 à 08/06, consegui focar meu trabalho no módulo de &lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Num primeiro momento criei um Dockerfile para o módulo de &lt;em&gt;front-end&lt;/em&gt; usando como base a imagem oficial do NodeJS disponível no &lt;em&gt;Docker Hub&lt;/em&gt;. Durante o processo de &lt;em&gt;build&lt;/em&gt; da imagem, instalava todas as dependências necessárias e por fim utilizava o &lt;em&gt;Gulp&lt;/em&gt; para subir um servidor de desenvolvimento.&lt;/p&gt;
&lt;p&gt;Esperava que a dockerização desse módulo fosse bem rápida, porém tive problemas com o passo final de subida do servidor de teste, pois o comando &lt;code class=&quot;language-text&quot;&gt;gulp serve&lt;/code&gt; não estava funcionando corretamente.&lt;/p&gt;
&lt;p&gt;Levei o problema para o time da SMIT no final da semana e aguardo um retorno.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 6 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 6)]]></title><description><![CDATA[Durante a semana dos dias 26/05 à 01/06, trabalhei em alguns ajustes finais nos módulo de  back-end  e do banco de dados. Fiz modificações…]]></description><link>https://victorhmp.github.io/mac0213-blog//26-05/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//26-05/</guid><pubDate>Sun, 02 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 26/05 à 01/06, trabalhei em alguns ajustes finais nos módulo de &lt;em&gt;back-end&lt;/em&gt; e do banco de dados.&lt;/p&gt;
&lt;p&gt;Fiz modificações procurando evitar a cópia de arquivos desnecessários para o container e tentar deixar o processo de &lt;em&gt;build&lt;/em&gt; e &lt;em&gt;up&lt;/em&gt; mais rápido. Pra isso modifiquei o script de inicialização da API quebrando-o em dois, sendo um deles responsável por compilar o código dos diferentes serviços que compõem o &lt;em&gt;back-end&lt;/em&gt; e o outro responsável por subir o servidor da aplicação e inicializar o banco de dados.&lt;/p&gt;
&lt;p&gt;Com essas modificações, o processo de subida da aplicação ficou muito mais rápido, pois o código não seria compilado sempre, e o banco de dados não precisaria ser criado novamente.&lt;/p&gt;
&lt;p&gt;Durante a semana também tive problema com o dump do banco de dados que tinha recebido, que resultavam em erro quando tentava popular o BD. Levei esse problema para o time da SMIT e eles me mandaram um dump mais recente, com esse consegui inicializar o BD.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 5)]]></title><description><![CDATA[Durante a semana dos dias 19/05 à 25/05, continuei o trabalho de implementação da conteinerização da FATIMA. Com os resultados obtidos na…]]></description><link>https://victorhmp.github.io/mac0213-blog//19-05/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//19-05/</guid><pubDate>Sat, 25 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 19/05 à 25/05, continuei o trabalho de implementação da conteinerização da FATIMA.&lt;/p&gt;
&lt;p&gt;Com os resultados obtidos na semana anterior de ter conseguido subir o container da API, ainda não estava conseguindo fazer com que a API se comunicar com o módulo do banco de dados.&lt;/p&gt;
&lt;p&gt;Depois de conversar com o time da SMIT, apaguei a Dockerfile que tinha criado para o serviço e decidi utilizar a imagem do MariaDB disponível no Docker Hub sem alterações, movendo a responsabilidade de rodar comandos para iniciar o banco para o módulo do back-end, assim contornando um problema que estava enfrentando ao tentar rodar os scripts de configuração no banco antes mesmo dele ser iniciado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 4)]]></title><description><![CDATA[Durante a semana dos dias 12/05 à 18/05, continuei trabalhando na implementação da dockerização da plataforma tentando fazer os diferentes…]]></description><link>https://victorhmp.github.io/mac0213-blog//12-05/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//12-05/</guid><pubDate>Sun, 19 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 12/05 à 18/05, continuei trabalhando na implementação da dockerização da plataforma tentando fazer os diferentes módulos funcionarem nos containeres.&lt;/p&gt;
&lt;p&gt;Para o módulo de &lt;em&gt;back-end&lt;/em&gt; troquei a imagem base sendo usada para a imagem oficial do Gradle, o que elimina a necessidade de um paço extra no processo de build só para instalar essa ferramenta. Escrevi um Dockerfile para extender a imagem original adicionando a execução dos scripts que precisavam ser executados para compilar e executar todo esse módulo da FATIMA, além da instrução que realiza a configuração inicial do banco de dados por meio do mysql, base do MariaDB.&lt;/p&gt;
&lt;p&gt;Com essas alterações consegui finalmente subir o container da API, apenas com uma série de &lt;em&gt;warnings&lt;/em&gt; que já eram “esperados” e não vieram de alterações feitas por mim.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 3)]]></title><description><![CDATA[Durante a semana dos dias 05/05 à 11/05, comecei a trabalhar na parte prática da conteinerização do FATIMA. Primeiro, pesquisei artigos com…]]></description><link>https://victorhmp.github.io/mac0213-blog//05-05/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//05-05/</guid><pubDate>Mon, 13 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 05/05 à 11/05, comecei a trabalhar na parte prática da conteinerização do FATIMA. Primeiro, pesquisei artigos com exemplos de como utilizar o MariaDB dentro de um container e fazer &lt;em&gt;queries&lt;/em&gt; de um outro container, algo muito comum quando rodando uma instância de um banco de dados com auxílio do &lt;em&gt;Docker&lt;/em&gt;. Encontrei muitos artigos e tentei reproduzir o que encontrei, porém algo que não encontrei e ainda tentei resolver de diversas formas, ainda sem sucesso, foi como rodar o script de instalação dentro do container antes de deixá-lo rodando.&lt;/p&gt;
&lt;p&gt;Minha dificuldade veio do fato de que não quero ter que criar um quarto container apenas para se conectar com o container original de MariaDB e rodar o script de inicialização do banco, pois acredito que essa solução está longe da ideal. Ainda estou buscando um jeito de resolver esse problema, por meio da criação de uma imagem customizada do MariaDB acredito que vou conseguir.&lt;/p&gt;
&lt;p&gt;Enquanto não consegui rodar o script que preciso dentro do container com MariaDB, trabalhei em conseguir subir o container da API. Estou utilizando uma imagem base do Gradle para subir a API do FATIMA, e tive alguns problemas relacionados à árvore de repositórios que estava sendo passada para dentro do container e problemas de permissão de alteração dos arquivos, mas esses problemas foram resolvidos. O processo de &lt;em&gt;build&lt;/em&gt; da API é demorado e deve ser executado sempre que subo os containers, isso torna a realização de testes mais lenta. Recebo múltiplos &lt;em&gt;warnings&lt;/em&gt; ao subir o container da API, mas o erro que ocorre no último passo é referente ao fato de não conseguir subir o container do banco de dados do jeito que devia.&lt;/p&gt;
&lt;p&gt;No dia 09/05 (quinta-feira), estive em uma reunião com o time da SMIT responsável pela aplicação e expus os problemas que estava tendo. Conversamos sobre possíveis soluções e sobre um eventual ajuste no cronograma inicial, dado o atraso de três semanas que tivemos na disponibilização do código.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 2)]]></title><description><![CDATA[Durante a semana dos dias 28/04 à 04/05, continuei trabalhando na melhor arquitetura para a plataforma. Após ter uma boa ideia de como…]]></description><link>https://victorhmp.github.io/mac0213-blog//28-04/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//28-04/</guid><pubDate>Sun, 05 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 28/04 à 04/05, continuei trabalhando na melhor arquitetura para a plataforma.&lt;/p&gt;
&lt;p&gt;Após ter uma boa ideia de como poderíamos dividir os containeres que seriam utilizados, conversei com o time da SMIT pelo &lt;em&gt;Slack&lt;/em&gt;, nosso principal canal de comunicação durante todo o projeto, e marcamos uma reunião para validar minha ideia de arquitetura preservando a divisão intencional de serviços da FATIMA. Durante reunião que durou pouco mais de uma hora, consegui validar minha ideia e recebi orientações sobre detalhes específicos à plataforma que deveriam ser considerados durante a implementação.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 3 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Conteinerização (Pt. 1)]]></title><description><![CDATA[Durante a semana dos dias 21/04 à 27/04, busquei encontrar qual seria a melhor maneira de dividir e orquestrar os serviços e módulos que…]]></description><link>https://victorhmp.github.io/mac0213-blog//21-04/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//21-04/</guid><pubDate>Wed, 01 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 21/04 à 27/04, busquei encontrar qual seria a melhor maneira de dividir e orquestrar os serviços e módulos que compõem o FATIMA em containers utilizando &lt;em&gt;Docker&lt;/em&gt; e &lt;em&gt;Compose&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Num primeiro momento, pensei em criar dois containers, sendo um deles rodando uma imagem baseada na imagem original do NodeJS para rodar o front-end do FATIMA e o outro rodando uma imagem customizada que rodaria uma instância do MariaDB e instalaria as dependências necessárias para utilizar Java e Gradle.&lt;/p&gt;
&lt;p&gt;Depois de pesquisar sobre a imagem padrão do MariaDB e do Gradle no Docker Hub, descobri que talvez não fosse uma boa ideia misturar num container só dois serviços diferentes, o banco de dados e a API, e ainda seria necessária a criação de uma imagem muito mais complexa. Com isso, decidi que seria melhor utilizar 3 containers no lugar de 2: um container para executar o front-end; um container para rodar o back-end e servir a API; e um container com a função exclusiva de rodar um banco de dados MariaDB como servidor.&lt;/p&gt;
&lt;p&gt;Através do &lt;em&gt;Compose&lt;/em&gt;, vou conseguir gerenciar a subida desses containers, como um definido como um &lt;em&gt;service&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 6 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Recebimento do código da aplicação]]></title><description><![CDATA[Durante a semana dos dias 14/04 à 20/04, recebi o código da aplicação por email (dia 16/04) e busquei entender como a aplicação estava…]]></description><link>https://victorhmp.github.io/mac0213-blog//15-04/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//15-04/</guid><pubDate>Sun, 21 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 14/04 à 20/04, recebi o código da aplicação por email (dia 16/04) e busquei entender como a aplicação estava dividida para poder sugerir qual a melhor maneira de conteinerizá-la.&lt;/p&gt;
&lt;p&gt;Basicamente a aplicação está dividida em três módulos: o banco de dados, MariaDB; um back-end que interage com o banco e expõe uma API, feito com Java e Gradle automação de processos; um front-end que serve como cliente da API e interface para interação com o usuário do FATIMA, feito com AngularJS.&lt;/p&gt;
&lt;p&gt;O setup do ambiente local para rodar a plataforma está documentada no README do repositório, e no seu estado atual é longo e envolve instalação de algumas dependências no computador do usuário, apesar da presença de scripts que automatizam a subida da plataforma uma vez feito o setup de desenvolvimento, o que deve facilitar a conteinerização.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 5 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Terceira semana de estudos]]></title><description><![CDATA[Durante a semana dos dias 08/04 à 14/04, continuei o estudo sobre  Continuous Integration  e  Continuous Delivery , ainda aguardando receber…]]></description><link>https://victorhmp.github.io/mac0213-blog//08-04/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//08-04/</guid><pubDate>Tue, 16 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 08/04 à 14/04, continuei o estudo sobre &lt;em&gt;Continuous Integration&lt;/em&gt; e &lt;em&gt;Continuous Delivery&lt;/em&gt;, ainda aguardando receber o código da aplicação, o modelo da VM utilizada e poder estudar a aplicação.&lt;/p&gt;
&lt;p&gt;Procurei estudar mais sobre &lt;em&gt;Gitlab Runners&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Os links consultados foram os seguintes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/quick_start/README.html#configuring-a-runner&quot;&gt;https://docs.gitlab.com/ee/ci/quick_start/README.html#configuring-a-runner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/install/&quot;&gt;https://docs.gitlab.com/runner/install/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/runners/README.html#registering-a-specific-runner&quot;&gt;https://docs.gitlab.com/ee/ci/runners/README.html#registering-a-specific-runner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=enMumwvLAug&quot;&gt;https://www.youtube.com/watch?v=enMumwvLAug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Segunda semana de estudos]]></title><description><![CDATA[Durante a semana dos dias 01/04 à 06/04, busquei recursos online para aprender sobre  continuous integration (CI)  e  continuous delivery…]]></description><link>https://victorhmp.github.io/mac0213-blog//01-04/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//01-04/</guid><pubDate>Sat, 06 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a semana dos dias 01/04 à 06/04, busquei recursos online para aprender sobre &lt;em&gt;continuous integration (CI)&lt;/em&gt; e &lt;em&gt;continuous delivery (CD)&lt;/em&gt;, encontrando diversoss vídeos sobre o assunto e uma documentação muito compreensiva disponibilizada pelo time do &lt;em&gt;Gitlab&lt;/em&gt; em &lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;https://docs.gitlab.com/ee/ci/&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Outros links consultados foram:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/stages-devops-lifecycle/&quot;&gt;https://about.gitlab.com/stages-devops-lifecycle/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/topics/autodevops/&quot;&gt;https://docs.gitlab.com/ee/topics/autodevops/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/README.html&quot;&gt;https://docs.gitlab.com/ee/ci/yaml/README.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/quick_start/README.html&quot;&gt;https://docs.gitlab.com/ee/ci/quick_start/README.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 10 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Primeira semana de estudos]]></title><description><![CDATA[Durante a primeira semana de desenvolvimento do projeto, procurei conhecer melhor as ferramentas que estavam disponíveis para o nosso…]]></description><link>https://victorhmp.github.io/mac0213-blog//25-03/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//25-03/</guid><pubDate>Thu, 04 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Durante a primeira semana de desenvolvimento do projeto, procurei conhecer melhor as ferramentas que estavam disponíveis para o nosso objetivo de automatizar o processo de Continuous Integration e Continuous Deployment e eventualmente escolher qual seria utilizada no projeto. &lt;/p&gt;
&lt;p&gt;Encontrei duas ferramentas igualmente viáveis para utilizarmos: Travis CI (&lt;a href=&quot;https://travis-ci.org/&quot;&gt;https://travis-ci.org/&lt;/a&gt;) e GitLab CI (&lt;a href=&quot;https://about.gitlab.com/&quot;&gt;https://about.gitlab.com/&lt;/a&gt; product/continuous-integration/). A Travis CI é a solução mais comum entre projetos open-source, principalmente os projetos hospedados no GitHub e possui uma comunidade de usuários muito ativa, além de uma excelente documentação. Já a GitLab CI/CD é a solução integrada ao GitLab para projetos hospedados na plataforma, que também é capaz de lidar não só com CI mas também com CD, e também possui uma documentação muito bem detalhada e mantida pela equipe do GitLab. Como citado na sessão de Objetivos, o código-fonte da FATIMA está hospedado no GitLab - uma das motivações para sua escolha sobre o GitHub é o fato de a plataforma ser open-source - e a facilidade de utilizar uma solução já integrada nesse ambiente, sem perder nenhuma das funcionalidades que precisamos fez com que eu e o time da SMIT escolhêssemos o GitLab CI/CD para realizar o trabalho.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 8 horas&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Planejamento]]></title><description><![CDATA[Em reunião realizada no dia 08 de março às 16h na Secretaria Municipal de Inovação e Tecnologia (SMIT), localizada no centro de São Paulo…]]></description><link>https://victorhmp.github.io/mac0213-blog//planning/</link><guid isPermaLink="false">https://victorhmp.github.io/mac0213-blog//planning/</guid><pubDate>Wed, 03 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Em reunião realizada no dia 08 de março às 16h na Secretaria Municipal de Inovação e Tecnologia (SMIT), localizada no centro de São Paulo, conheci meu supervisor pessoalmente, Eduardo Spanó e demais membros da SMIT que estarão envolvidos de alguma maneira no projeto. Durante a reunião conversamos sobre o &lt;em&gt;background&lt;/em&gt; de cada um dos participantes e tivemos uma primeira noção de como o planejamento seria feito, dado o meu conhecimento prévio e disponibilidade de trabalhar na SMIT quando necessário.&lt;/p&gt;
&lt;p&gt;O planejamento que derivamos para o projeto, assumindo uma dedicação média de 8 horas semanais, é o seguinte:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Semana&lt;/th&gt;
&lt;th&gt;Atividade&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Semana 1 (25/03)&lt;/td&gt;
&lt;td&gt;Pesquisar ferramentas e aprender sobre GitLab CI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semana 2&lt;/td&gt;
&lt;td&gt;Receber os códigos + modelo da VM + estudar a aplicação&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semana 3, 4, 5 e 6&lt;/td&gt;
&lt;td&gt;Conteinerizar a aplicação&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semana 7, 8 e 9&lt;/td&gt;
&lt;td&gt;Automatizar o deploy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semana 10&lt;/td&gt;
&lt;td&gt;Sistematizar aprendizados e próximos passos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semana 11, 12&lt;/td&gt;
&lt;td&gt;Oficinas de aprendizados&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Horas&lt;/strong&gt;: 1 hora&lt;/p&gt;</content:encoded></item></channel></rss>