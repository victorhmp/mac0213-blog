webpackJsonp([0xd130dced7c7],{413:function(e,a){e.exports={data:{site:{siteMetadata:{title:"MAC0213 Blog",author:"Victor Hugo M. Pinto"}},markdownRemark:{id:"/Users/victorhugo/Projects/mac213-blog/src/pages/21-04/index.md absPath of file >>> MarkdownRemark",html:"<p>Durante a semana dos dias 21/04 à 27/04, busquei encontrar qual seria a melhor maneira de dividir e orquestrar os serviços e módulos que compõem o FATIMA em containers utilizando <em>Docker</em> e <em>Compose</em>.</p>\n<p>Num primeiro momento, pensei em criar dois containers, sendo um deles rodando uma imagem baseada na imagem original do NodeJS para rodar o front-end do FATIMA e o outro rodando uma imagem customizada que rodaria uma instância do MariaDB e instalaria as dependências necessárias para utilizar Java e Gradle.</p>\n<p>Depois de pesquisar sobre a imagem padrão do MariaDB e do Gradle no Docker Hub, descobri que talvez não fosse uma boa ideia misturar num container só dois serviços diferentes, o banco de dados e a API, e ainda seria necessária a criação de uma imagem muito mais complexa. Com isso, decidi que seria melhor utilizar 3 containers no lugar de 2: um container para executar o front-end; um container para rodar o back-end e servir a API; e um container com a função exclusiva de rodar um banco de dados MariaDB como servidor.</p>\n<p>Através do <em>Compose</em>, vou conseguir gerenciar a subida desses containers, como um definido como um <em>service</em>.</p>\n<p><strong>Horas</strong>: 6 horas</p>",frontmatter:{title:"Conteinerização (Pt. 1)",date:"May 01, 2019"}}},pathContext:{slug:"/21-04/",previous:{fields:{slug:"/15-04/"},frontmatter:{title:"Recebimento do código da aplicação"}},next:{fields:{slug:"/28-04/"},frontmatter:{title:"Conteinerização (Pt. 2)"}}}}}});
//# sourceMappingURL=path---21-04-851c4695b73e41d651cf.js.map